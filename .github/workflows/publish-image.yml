name: Publish Docker image

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'main'

env:
  IMAGE: flypsi/schatzmeister

jobs:
  build:
    name: Build (${{ matrix.arch }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-22.04
            platform: linux/amd64
          - arch: arm64
            runner: ubuntu-22.04-arm64     # ARM64 Runner
            platform: linux/arm64
    runs-on: ${{ matrix.runner }}
    permissions:
      packages: write
      contents: read
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v5

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up buildx
        uses: docker/setup-buildx-action@v3

      # Optional: Registry-Cache beschleunigt Wiederholungsbuilds deutlich
      - name: Build and push (by digest)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          # Wir pushen die Images "by digest" (ohne Tags) und mergen später zu einem Manifest
          outputs: type=image,name=${{ env.IMAGE }},push-by-digest=true,name-canonical=true
          cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache,mode=max

      - name: Export digest
        run: echo "${{ steps.build.outputs.digest }}" > digest-${{ matrix.arch }}

      - name: Upload digest artifact
        uses: actions/upload-artifact@v4
        with:
          name: digests
          path: digest-${{ matrix.arch }}

  merge:
    name: Create multi-arch manifest and attest
    runs-on: ubuntu-24.04
    needs: build
    permissions:
      packages: write
      contents: read
      id-token: write
      attestations: write
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE }}

      - name: Download digest artifacts
        uses: actions/download-artifact@v4
        with:
          name: digests
          path: .

      - name: Create and push manifest list for all tags
        id: manifest
        shell: bash
        run: |
          set -euo pipefail
          DIGESTS=()
          while read -r f; do
            DIGESTS+=("${{ env.IMAGE }}@$(cat "$f")")
          done < <(ls -1 digest-* | sort)

          # Für alle von docker/metadata-action erzeugten Tags das Manifest erzeugen
          while read -r TAG; do
            [ -z "$TAG" ] && continue
            echo "Creating manifest for: $TAG"
            docker buildx imagetools create -t "$TAG" "${DIGESTS[@]}"
          done <<< "${{ steps.meta.outputs.tags }}"

          # Den ersten Tag als "primary" setzen, um den Digest zu extrahieren
          PRIMARY_TAG="$(echo "${{ steps.meta.outputs.tags }}" | head -n1)"
          echo "primary_tag=$PRIMARY_TAG" >> "$GITHUB_OUTPUT"

      - name: Resolve manifest digest
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          # Digest des Manifests ermitteln
          # Ausgabe enthält "Digest: sha256:..."
          DIGEST="$(docker buildx imagetools inspect "${{ steps.manifest.outputs.primary_tag }}" | awk -F': ' '/Digest:/ {print $2; exit}')"
          echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"
          echo "Resolved digest: $DIGEST"

      - name: Generate artifact attestation (manifest)
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: index.docker.io/${{ env.IMAGE }}
          subject-digest: ${{ steps.resolve.outputs.digest }}
          push-to-registry: true